---
title: "Using get_table()"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{using-get_table}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

The `ideadata` package utilizes the simple concept of `get_*` functions, which is named after the table that you want to connect to in the warehouse in one line.  Functions like [get_students] are useful because they lower your cognitive load ("What DB and schema do I pull students from and what's the SQL look like") and they ensure that anyone using this package (read: R&A) are always pulling the same data when they start an analysis, save any processing logic.

One big downside: they need to be created one at a time and so if a new set of tables is added to the data warehouse, there can a lag between when those tables are added and when there is a corresponding `get_*` function in this package.

## Introducing `get_table()`

To mitigate against the time Chris has to develop new `get_*` functions and the ever evolving nature of data warehouse, `ideadata` now has a new workhourse function: `get_table()`.

This function does exactly what it says: it get's tables from the warehouse by looking up table location in the `MetaData` table in the `Documentation` schema of R&A's SQL Server instance.  That table updates frequently and contains a comprehensive view of the data warehouse at any time.

`get_table()` makes a connection (this one is hidden in the `idea_shims` environment) to that table when called, finds a table location, and then pulls that table down.  The look-up is relatively quick, but do realize, it's introduces an extra connection, an extra query, and an extra pull of the data. Consequently it's slow to use for getting student data than the `get_students()` function.

## Usage

### Simple usage
If the table is uniquely named in the data warehouse then the usage is very straightforward. You need to simply the table name to function:

```{r usage_easy}
devtools::load_all(".")
#library(ideadata)
library(tidyverse)

oe_responses <- get_table("OEResponses")

head(oe_responses)
```
Not too bad.

### Less simple usage, or failing informatively
This function **will fail** if the tables is not uniquely named in the warehouse. Why? Because there is no way to know which table you really mean.  One solution, if you know the location, is to provide the table name, database name, and schema to the `.table_name`, `database_name`, and `.schema` arguments of `get_table()`.  That will locate the right server and make the connection and avoid failure.

**But here is something cool**: What if you don't know that info? When `get_table` fails in this scenario it fails informatively.  `get_table` will show you all the tables it's found in the warehouse and *give you code you can copy and paste to get the table you want*.

Let's say you ask for the `Schools` table

```{r schools_too_man}
schools <- get_table("Schools")
```

Oh no! There are 21 tables named `Schools` in the warehouse on 17 databases.  Yikes.

**But look at that error**: It's got what you need!

You can copy and paste any one of those lines to get the unique table you are seeking (in this case the `Schools` table in `Schools` on `Prod1`).

```{r students_prod1}

schools <- get_table(.table_name = "Schools", .database_name = "PROD1", .schema = "Schools")

head(schools)
```




